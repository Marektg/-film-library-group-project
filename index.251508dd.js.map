{"mappings":"wkBAAAA,EAAAC,EAAA,SCAAC,EAAAD,EAAA,sBAAME,EAAU,4CAEMC,EAAkBC,UAAlBC,EAAiBC,MAAAC,KAAAC,oBAAjBH,WAAAA,EAAfI,EAAAR,EAAA,CAAAQ,EAAAC,GAAAC,MAAA,SAAAC,EAAiCR,OAAaS,EAE3CC,EAIAC,EAAOC,EAAAR,mFANoCK,EAAAG,EAAAC,OAAA,QAAA,IAAAD,EAAA,GAAQA,EAAA,GAAD,oBAEjCE,MACpB,qDAAqEC,OAAjBjB,EAAQ,WAA4CiB,OAAnCf,EAAY,yBAA4Be,OAALN,EAAK,uCAD1GC,EAAQM,EAAAC,cAIQP,EAASQ,qBAAzBP,EAAOK,EAAAC,KAEbE,QAAQC,IAAIT,qBACLA,qCAEPQ,QAAQC,IAAGJ,EAAAK,8DAXOpB,EAAiBC,MAAAC,KAAAC,WDkChC,SAASkB,EAAiBtB,GAC/B,IAAMuB,EAAWC,SAASC,cAAc,wBACxC1B,EAAkBC,GAAa0B,MAAK,SAAAhB,GAClCS,QAAQC,IAAIV,GAEmB,IAA3BA,EAASiB,cACXH,SAASC,cAAc,cAAcG,UAAUC,OAAO,aAClDL,SAASC,cAAc,cAAcG,UAAUE,IAAI,aACzDP,EAASQ,UAAuBrB,EAASC,QAlCxCqB,KACC,SAAAC,OACEC,EAAaD,EAAbC,cACAC,EAAWF,EAAXE,YACAC,EAAKH,EAALG,MACAC,EAASJ,EAATI,UACAC,EAAYL,EAAZK,aACAC,EAAYN,EAAZM,aACAC,EAAEP,EAAFO,SACK,sCAGHzB,OAFyByB,EAAG,6FAGRzB,OADJ,OAAhBoB,EAAuBA,EAAcD,EACtC,uBAE2BnB,OAFNqB,EAAM,8EAGYrB,OADZqB,EAAM,yDAGRrB,QAFc,EAAApB,EAAA8C,SAAeJ,GAAW,4FAGtCtB,OADF,IAAI2B,KAAKJ,GAAcK,cAAc,4CACH5B,OAAhC6B,OAAOL,GAAcM,QAAQ,GAAG,iDAK/DC,KAAK,OEhCV,IAAMC,EAAcvB,SAASC,cAAc,gBAC3CN,QAAQC,IAAI2B,GACZ,IAAMC,EAAaxB,SAASC,cAAc,iBAI1C,SAASwB,IACP,IAAMjD,EAAc+C,EAAYG,MACZ,KAAhBlD,GAIFwB,SAASC,cAAc,cAAcG,UAAUE,IAAI,aAErDR,EAAiBtB,IALfwB,SAASC,cAAc,cAAcG,UAAUC,OAAO,aAN1DV,QAAQC,IAAI4B,GAcZA,EAAWG,iBAAiB,QAASF,GACrCF,EAAYI,iBAAiB,YAAY,SAAkBC,GACvC,UAAdA,EAAMC,KACRJ,kBCtBJK,EAAA1D,EAAA,qCAIgB4B,SAASC,cAAc,kBAC/B0B,iBAAiB,SAIzB,SAA8BI,GAE5B,GADAC,QAAUD,EAAIE,OAAOC,QAAQjD,KACG,SAA5B8C,EAAIE,OAAOC,QAAQjD,KAErB,YADAU,QAAQC,IAAI,mCAIduC,EAAOC,eAAe,CAAEC,SAAU,YAClC,EAAAP,EAAAb,SAAiB,WAAYe,UAC7B,EAAAM,EAAAC,sBAXF,IAAMJ,EAASnC,SAASC,cAAc,WCGtC,EAAA6B,EAAAb","sources":["src/components/renderSearchMovie/renderSearchMovie.js","src/components/fetchMoviesSearch/fetchMovieSearch.js","src/components/searchByKeyword/searchByKeyword.js","src/components/changePage/changePage.js","src/index.js"],"sourcesContent":["import getGenresNames from '../getGenresNames/getGenresNames';\nimport { fetchMovieByQuery } from '../fetchMoviesSearch/fetchMovieSearch';\n\nfunction notificationRender()\n{\n\n}\n\nconst htmlMarkup = data =>\n  data\n    .map(\n      ({\n        backdrop_path,\n        poster_path,\n        title,\n        genre_ids,\n        release_date,\n        vote_average,\n        id,\n      }) => `\n      <div class=\"item\" data-id=\"${id}\" data-modal-open>\n        <img class=\"item__image\" src=\"https://image.tmdb.org/t/p/w300${\n          poster_path !== null ? poster_path : backdrop_path\n        }\" alt=\" Poster of: ${title}\" />\n        <div class=\"item__info\">\n          <h3 class=\"item__title\">${title}</h3>\n          <p class=\"item__genres\" data-genres>${getGenresNames(genre_ids)}</p>\n          <span class=\"item__separator\">|</span>\n          <p class=\"item__year\">${new Date(release_date).getFullYear()}</p>\n          <p class=\"item__rating\">${Number(vote_average).toFixed(1)}</p>\n        </div>\n      </div>\n      `\n    )\n    .join('');\n\nexport function renderCollection(searchQuery) {\n  const filmList = document.querySelector('[data-markup-output]');\n  fetchMovieByQuery(searchQuery).then(response => {\n    console.log(response);\n\n    if (response.total_results === 0) {\n      document.querySelector('.not-found').classList.remove('is-hidden');\n    }else{document.querySelector('.not-found').classList.add('is-hidden');}\n    filmList.innerHTML = htmlMarkup(response.results);\n  });\n}\n\n","const API_KEY = '2f202abcab3fe0934220a17698275697';\n\nexport async function fetchMovieByQuery(searchQuery, page = 1) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchQuery}&language=en-US&page=${page}&include_adult=false`\n    );\n\n    const results = await response.json();\n\n    console.log(results);\n    return results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { renderCollection } from '../renderSearchMovie/renderSearchMovie';\n\nconst search_form = document.querySelector('[data-input]');\nconsole.log(search_form);\nconst search_btn = document.querySelector('[data-search]');\nconsole.log(search_btn);\n\n\nfunction searchHandler() {\n  const searchQuery = search_form.value;\n  if (searchQuery === '') {\n    document.querySelector('.not-found').classList.remove('is-hidden');\n    return;\n  }else{\n    document.querySelector('.not-found').classList.add('is-hidden');\n  }\n  renderCollection(searchQuery);\n}\n\nsearch_btn.addEventListener('click', searchHandler);\nsearch_form.addEventListener('keypress', function checkKey(event) {\n  if (event.key === 'Enter') {\n    searchHandler();\n  }\n});\n","import moviesListMarkup from '../moviesListMarkup/moviesListMarkup';\nimport loadMoviesList from '../loadMoviesList/loadMoviesList';\nimport { initializeModal } from '../movieModal/movieModal';\n\nconst element = document.querySelector('.pagination ul');\nelement.addEventListener('click', supportForChangePage);\n\nconst header = document.querySelector('header');\n\nfunction supportForChangePage(evt) {\n  pageNum = evt.target.dataset.page;\n  if (evt.target.dataset.page === 'dots') {\n    console.log('Selected dots, doing nothing...');\n    return;\n  }\n\n  header.scrollIntoView({ behavior: 'smooth' });\n  moviesListMarkup('trending', pageNum);\n  initializeModal();\n}\n","// Style podstawowe + container\nimport './main.scss';\n\n// Nagłówek\nimport './components/header/header';\nimport './components/loadMoviesList/loadMoviesList';\nimport './components/footer/footer';\n\n// Rendering popularnych filmów na stronę główną i wywołanie funkcji dla 'trending'\nimport moviesListMarkup from './components/moviesListMarkup/moviesListMarkup';\nmoviesListMarkup();\n\n// Szukajka\nimport './components/searchByKeyword/searchByKeyword';\n\n// Paginacja\nimport createPagination from './components/pagination/pagination';\nimport './components/changePage/changePage';\n"],"names":["$kPSUl","parcelRequire","$bpxeT","$513448bd54211730$var$API_KEY","$513448bd54211730$export$a7d04264f8bbc9bb","searchQuery","$513448bd54211730$var$_fetchMovieByQuery","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","page","response","results","_args","length","fetch","concat","_ctx","sent","json","console","log","t0","$20eda2765ad207cc$export$1b8bdbb4d20259a","filmList","document","querySelector","then","total_results","classList","remove","add","innerHTML","map","param","backdrop_path","poster_path","title","genre_ids","release_date","vote_average","id","default","Date","getFullYear","Number","toFixed","join","$f3ed723f23f7b3a7$var$search_form","$f3ed723f23f7b3a7$var$search_btn","$f3ed723f23f7b3a7$var$searchHandler","value","addEventListener","event","key","$14zMx","evt","pageNum","target","dataset","$36891d244abbd266$var$header","scrollIntoView","behavior","$2mLY7","initializeModal"],"version":3,"file":"index.251508dd.js.map"}